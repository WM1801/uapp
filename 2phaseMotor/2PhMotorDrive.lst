CCS PCD C Compiler, Version 4.114, 93460303               14-дек-15 15:57

               Filename: E:\PIC project\2phaseMotor\2PhMotorDrive.lst

               ROM used: 2082 bytes (5%)
                         Largest free fragment is 41950
               RAM used: 193 (2%) at main() level
                         188 (2%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  GOTO    3FA
*
002A:  DATA    98,03,00
*
004A:  DATA    68,03,00
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <24hj64gp206.h>  
.................... //////// Standard Header file for the PIC24HJ64GP206 device //////////////// 
.................... #device PIC24HJ64GP206 
.................... #list 
....................  
....................  
.................... #DEVICE ADC=10 
....................  
.................... #FUSES NOWDT                       //No Watch Dog Timer  
.................... #FUSES PR,HS                   //High speed Osc (> 4mhz)  
.................... #FUSES PUT64                       //Power Up Timer  
.................... #FUSES NOPROTECT                   //Code not protected from reads  
.................... #FUSES NODEBUG                     //No Debug mode for ICD  
.................... #FUSES NOWRT                       //Program memory not write protected  
....................  
.................... #use delay(clock=16Mhz)  
*
03EA:  CP0     W0
03EC:  BTSC.B  42.1
03EE:  BRA     3F8
03F0:  REPEAT  #1F39
03F2:  NOP     
03F4:  DEC     W0,W0
03F6:  BRA     3EA
03F8:  RETURN  
....................  
....................   
.................... #use rs232(uart1, baud=9600,parity=N,  BITS =8,STOP=1,STREAM=RS485)  
....................  
.................... #use standard_io(All) 
....................  
.................... //******************************************************************** 
.................... //Регистры МК для ШИМ  
.................... #word OC1R = getenv("sfr:OC1R")  
.................... #word OC1RS = getenv("sfr:OC1RS") 
.................... #word OC2R = getenv("sfr:OC2R")  
.................... #word OC2RS = getenv("sfr:OC2RS") 
.................... #word OC3R = getenv("sfr:OC3R")  
.................... #word OC3RS = getenv("sfr:OC3RS") 
.................... #word OC4R = getenv("sfr:OC4R")  
.................... #word OC4RS = getenv("sfr:OC4RS") 
.................... #word OC5R = getenv("sfr:OC5R")  
.................... #word OC5RS = getenv("sfr:OC5RS") 
.................... #word OC6R = getenv("sfr:OC6R")  
.................... #word OC6RS = getenv("sfr:OC6RS") 
.................... //******************************************************************** 
.................... //Выходы управления 
.................... #define BL1 PIN_F0 
.................... #define BL2 PIN_F1 
.................... #define LED1 PIN_G7//Green LED 
.................... #define LED2 PIN_G8//Red LED 
.................... #define SD PIN_G15//Enable GEN 
.................... #define EXTLED1 PIN_G0 
.................... #define EXTLED2 PIN_G1 
.................... #define DIRRS PIN_F6 
.................... //******************************************************************** 
.................... unsigned int Dat[10];       
.................... char Ndat; 
.................... unsigned int D=0; 
.................... char inchar=0x1e; 
.................... unsigned int outchar; 
.................... unsigned int i; 
.................... unsigned int Nt[5],E1,E2,E3,E4,V[5],ADC; 
.................... unsigned int Adr=0x30;			//адрес модуля 
.................... //*********************************************************** 
.................... //*********************************************************** 
.................... void answer(){ 
*
0200:  MOV     W5,[W15++]
.................... //**************************************************************** 
.................... //*************  Write 4 chanel (func 0x10) rs-485 ***** 
.................... //**************************************************************** 
.................... output_high(LED2);//Red LED On 
0202:  BCLR.B  2E5.0
0204:  BSET.B  2E9.0
.................... if ((Ndat==6)&(Dat[1]==Adr)&(Dat[2]==0x10)){ 
0206:  MOV     814,W4
0208:  CP.B    W4L,#6
020A:  BRA     Z,210
020C:  CLR.B   W0
020E:  BRA     212
0210:  MOV.B   #1,W0L
0212:  MOV.B   W0L,W5L
0214:  MOV     802,W0
0216:  CP      83A
0218:  BRA     Z,21E
021A:  CLR.B   W0
021C:  BRA     220
021E:  MOV.B   #1,W0L
0220:  AND.B   W5L,W0L,W5L
0222:  MOV     804,W4
0224:  CP      W4,#10
0226:  BRA     Z,22C
0228:  CLR.B   W0
022A:  BRA     22E
022C:  MOV.B   #1,W0L
022E:  AND.B   W5L,W0L,W0L
0230:  CP0.B   W0L
0232:  BRA     Z,2C4
....................  
.................... disable_interrupts(INT_TIMER4); 
0234:  BCLR.B  97.3
.................... disable_interrupts(INT_RDA); 
0236:  BCLR.B  95.3
.................... 	delay_ms(8); 
0238:  REPEAT  #39FE
023A:  NOP     
023C:  REPEAT  #3FFF
023E:  NOP     
0240:  REPEAT  #3FFF
0242:  NOP     
0244:  REPEAT  #3FFF
0246:  NOP     
.................... Nt[1]=Dat[3]; 
0248:  PUSH    806
024A:  POP     81E
.................... Nt[2]=Dat[4]; 
024C:  PUSH    808
024E:  POP     820
.................... Nt[3]=Dat[5]; 
0250:  PUSH    80A
0252:  POP     822
.................... Nt[4]=Dat[6]; 
0254:  PUSH    80C
0256:  POP     824
.................... output_high(PIN_F6);//enable tx rs485 
0258:  BCLR.B  2DE.6
025A:  BSET.B  2E2.6
....................  
.................... 	putc(Adr);//1 TX 
025C:  MOV.B   83A,W0L
025E:  BTSC.B  223.1
0260:  BRA     25E
0262:  MOV.B   W0L,224
0264:  CLR.B   225
.................... 	delay_us(1100); 
0266:  REPEAT  #225E
0268:  NOP     
.................... 	putc(0x10);//2 TX 
026A:  MOV.B   #10,W0L
026C:  BTSC.B  223.1
026E:  BRA     26C
0270:  MOV.B   W0L,224
0272:  CLR.B   225
.................... 	delay_us(1100); 
0274:  REPEAT  #225E
0276:  NOP     
.................... 	putc(Nt[1]);//3 TX 
0278:  MOV.B   81E,W0L
027A:  BTSC.B  223.1
027C:  BRA     27A
027E:  MOV.B   W0L,224
0280:  CLR.B   225
.................... 	delay_us(1100); 
0282:  REPEAT  #225E
0284:  NOP     
.................... 	putc(Nt[2]);//4 TX 
0286:  MOV.B   820,W0L
0288:  BTSC.B  223.1
028A:  BRA     288
028C:  MOV.B   W0L,224
028E:  CLR.B   225
.................... 	delay_us(1100); 
0290:  REPEAT  #225E
0292:  NOP     
.................... 	putc(Nt[3]);//5 TX 
0294:  MOV.B   822,W0L
0296:  BTSC.B  223.1
0298:  BRA     296
029A:  MOV.B   W0L,224
029C:  CLR.B   225
.................... 	delay_us(1100); 
029E:  REPEAT  #225E
02A0:  NOP     
.................... 	putc(Nt[4]);//6 TX 
02A2:  MOV.B   824,W0L
02A4:  BTSC.B  223.1
02A6:  BRA     2A4
02A8:  MOV.B   W0L,224
02AA:  CLR.B   225
.................... 	delay_us(1100); 
02AC:  REPEAT  #225E
02AE:  NOP     
....................  
.................... output_low(PIN_F6);//enable rx rs485 
02B0:  BCLR.B  2DE.6
02B2:  BCLR.B  2E2.6
....................  
.................... Ndat=0; 
02B4:  CLR.B   814
.................... //Restart UART1(soft var-better) 
.................... setup_uart(FALSE); 
02B6:  BCLR.B  221.7
02B8:  BCLR.B  223.2
.................... setup_uart(TRUE); 
02BA:  BSET.B  221.7
02BC:  BSET.B  223.2
.................... clear_interrupt(INT_TIMER4); 
02BE:  BCLR.B  87.3
....................  
.................... enable_interrupts(INT_TIMER4); 
02C0:  BSET.B  97.3
.................... enable_interrupts(INT_RDA); 
02C2:  BSET.B  95.3
.................... } 
.................... //**************************************************************** 
.................... //*************  Write 1 chanel (func 0x06) rs-485 ***** 
.................... //**************************************************************** 
.................... if ((Ndat==3)&(Dat[1]==Adr)&(Dat[2]==0x06)){ 
02C4:  MOV     814,W4
02C6:  CP.B    W4L,#3
02C8:  BRA     Z,2CE
02CA:  CLR.B   W0
02CC:  BRA     2D0
02CE:  MOV.B   #1,W0L
02D0:  MOV.B   W0L,W5L
02D2:  MOV     802,W0
02D4:  CP      83A
02D6:  BRA     Z,2DC
02D8:  CLR.B   W0
02DA:  BRA     2DE
02DC:  MOV.B   #1,W0L
02DE:  AND.B   W5L,W0L,W5L
02E0:  MOV     804,W4
02E2:  CP      W4,#6
02E4:  BRA     Z,2EA
02E6:  CLR.B   W0
02E8:  BRA     2EC
02EA:  MOV.B   #1,W0L
02EC:  AND.B   W5L,W0L,W0L
02EE:  CP0.B   W0L
02F0:  BRA     Z,364
....................  
.................... disable_interrupts(INT_TIMER4); 
02F2:  BCLR.B  97.3
.................... disable_interrupts(INT_RDA); 
02F4:  BCLR.B  95.3
.................... 	delay_ms(8); 
02F6:  REPEAT  #39FE
02F8:  NOP     
02FA:  REPEAT  #3FFF
02FC:  NOP     
02FE:  REPEAT  #3FFF
0300:  NOP     
0302:  REPEAT  #3FFF
0304:  NOP     
....................  
.................... if ( bit_test(Dat[3],0)) output_high(BL1);//BL1 OFF 
0306:  BTSS.B  806.0
0308:  BRA     310
030A:  BCLR.B  2DE.0
030C:  BSET.B  2E2.0
.................... 	else output_low(BL1);//BL1 On 
030E:  BRA     314
0310:  BCLR.B  2DE.0
0312:  BCLR.B  2E2.0
.................... if ( bit_test(Dat[3],1)) output_high(BL2);//BL2 OFF 
0314:  BTSS.B  806.1
0316:  BRA     31E
0318:  BCLR.B  2DE.1
031A:  BSET.B  2E2.1
.................... 	else output_low(BL2);//BL2 On 
031C:  BRA     322
031E:  BCLR.B  2DE.1
0320:  BCLR.B  2E2.1
....................  
.................... output_high(PIN_F6);//enable tx rs485 
0322:  BCLR.B  2DE.6
0324:  BSET.B  2E2.6
....................  
.................... 	putc(Adr);//1 TX 
0326:  MOV.B   83A,W0L
0328:  BTSC.B  223.1
032A:  BRA     328
032C:  MOV.B   W0L,224
032E:  CLR.B   225
.................... 	delay_us(1100); 
0330:  REPEAT  #225E
0332:  NOP     
.................... 	putc(0x06);//2 TX 
0334:  MOV.B   #6,W0L
0336:  BTSC.B  223.1
0338:  BRA     336
033A:  MOV.B   W0L,224
033C:  CLR.B   225
.................... 	delay_us(1100); 
033E:  REPEAT  #225E
0340:  NOP     
.................... 	putc(Dat[3]);//3 TX 
0342:  MOV.B   806,W0L
0344:  BTSC.B  223.1
0346:  BRA     344
0348:  MOV.B   W0L,224
034A:  CLR.B   225
.................... 	delay_us(1100); 
034C:  REPEAT  #225E
034E:  NOP     
....................  
.................... output_low(PIN_F6);//enable rx rs485 
0350:  BCLR.B  2DE.6
0352:  BCLR.B  2E2.6
....................  
.................... Ndat=0; 
0354:  CLR.B   814
.................... //Restart UART1(soft var-better) 
.................... setup_uart(FALSE); 
0356:  BCLR.B  221.7
0358:  BCLR.B  223.2
.................... setup_uart(TRUE); 
035A:  BSET.B  221.7
035C:  BSET.B  223.2
.................... clear_interrupt(INT_TIMER4); 
035E:  BCLR.B  87.3
....................  
.................... enable_interrupts(INT_TIMER4); 
0360:  BSET.B  97.3
.................... enable_interrupts(INT_RDA); 
0362:  BSET.B  95.3
.................... } 
.................... } 
0364:  MOV     [--W15],W5
0366:  RETURN  
.................... //*********************************************************** 
.................... //*********************************************************** 
.................... #int_TIMER4 
.................... void  TIMER4_isr(void)  
.................... { 
0368:  PUSH    42
036A:  PUSH    36
036C:  MOV     W0,[W15++]
036E:  MOV     #2,W0
0370:  REPEAT  #C
0372:  MOV     [W0++],[W15++]
.................... disable_interrupts(INT_TIMER4); 
0374:  BCLR.B  97.3
.................... disable_interrupts(INT_RDA); 
0376:  BCLR.B  95.3
.................... answer();//Ответ 
0378:  CALL    200
.................... Ndat=0; 
037C:  CLR.B   814
.................... clear_interrupt(INT_TIMER4); 
037E:  BCLR.B  87.3
.................... output_high(LED2);//Red LED ON 
0380:  BCLR.B  2E5.0
0382:  BSET.B  2E9.0
.................... enable_interrupts(INT_RDA); 
0384:  BSET.B  95.3
.................... disable_interrupts(INT_TIMER4); 
0386:  BCLR.B  97.3
....................  
.................... } 
....................  
.................... //*********************************************************** 
0388:  BCLR.B  87.3
038A:  MOV     #1A,W0
038C:  REPEAT  #C
038E:  MOV     [--W15],[W0--]
0390:  MOV     [--W15],W0
0392:  POP     36
0394:  POP     42
0396:  RETFIE  
.................... #int_RDA 
.................... void  RDA_isr(void) 
.................... { 
0398:  PUSH    42
039A:  PUSH    36
039C:  MOV     W0,[W15++]
039E:  MOV     #2,W0
03A0:  REPEAT  #C
03A2:  MOV     [W0++],[W15++]
....................  
.................... disable_interrupts(INT_TIMER4); 
03A4:  BCLR.B  97.3
....................  
.................... inchar= getc(RS485); 
03A6:  BTSS.B  222.0
03A8:  BRA     3A6
03AA:  MOV     226,W0
03AC:  MOV.B   W0L,815
....................  
.................... output_high(LED2);//Red LED ON 
03AE:  BCLR.B  2E5.0
03B0:  BSET.B  2E9.0
....................  
.................... Ndat=Ndat+1; 
03B2:  MOV     814,W4
03B4:  ADD.B   W4L,#1,W4L
03B6:  MOV.B   W4L,W0L
03B8:  MOV.B   W0L,814
.................... Dat[Ndat]=inchar; 
03BA:  MOV.B   814,W0L
03BC:  CLR.B   1
03BE:  SL      W0,#1,W0
03C0:  MOV     #800,W4
03C2:  ADD     W0,W4,W5
03C4:  MOV.B   815,W0L
03C6:  MOV.B   W0L,[W5]
03C8:  MOV.B   #0,W0L
03CA:  MOV.B   W0L,[W5+#1]
....................  
.................... set_timer4(0); 
03CC:  CLR     114
....................  
.................... //Restart UART1(soft var-better) 
.................... setup_uart(FALSE); 
03CE:  BCLR.B  221.7
03D0:  BCLR.B  223.2
.................... setup_uart(TRUE); 
03D2:  BSET.B  221.7
03D4:  BSET.B  223.2
.................... clear_interrupt(INT_TIMER4); 
03D6:  BCLR.B  87.3
.................... enable_interrupts(INT_TIMER4); 
03D8:  BSET.B  97.3
....................  
.................... } 
.................... //*********************************************************** 
03DA:  BCLR.B  85.3
03DC:  MOV     #1A,W0
03DE:  REPEAT  #C
03E0:  MOV     [--W15],[W0--]
03E2:  MOV     [--W15],W0
03E4:  POP     36
03E6:  POP     42
03E8:  RETFIE  
.................... void main()  
.................... {  
*
03FA:  MOV     #4444,W0
03FC:  MOV     W0,A8
03FE:  MOV     #4444,W0
0400:  MOV     W0,B0
0402:  BSET.B  81.7
0404:  MOV     #8000,W4
0406:  MOV     W4,220
0408:  MOV     #400,W4
040A:  MOV     W4,222
040C:  BCLR.B  220.3
040E:  MOV     #33,W4
0410:  MOV     W4,228
0412:  CLR     816
0414:  MOV.B   #1E,W0L
0416:  MOV.B   W0L,815
0418:  MOV     #30,W4
041A:  MOV     W4,83A
041C:  SETM    32C
041E:  SETM    32A
0420:  MOV     #1F80,W15
0422:  MOV     #1FFF,W0
0424:  MOV     W0,20
0426:  NOP     
....................  
.................... output_low(BL1);//BL1 On 
0428:  BCLR.B  2DE.0
042A:  BCLR.B  2E2.0
.................... output_low(BL2);//BL2 On 
042C:  BCLR.B  2DE.1
042E:  BCLR.B  2E2.1
.................... delay_ms(1000); 
0430:  MOV     #3E8,W0
0432:  CALL    3EA
....................  
.................... Ndat=0; 
0436:  CLR.B   814
....................  
.................... output_high(BL1);//BL1 OFF 
0438:  BCLR.B  2DE.0
043A:  BSET.B  2E2.0
.................... output_high(BL2);//BL2 OFF 
043C:  BCLR.B  2DE.1
043E:  BSET.B  2E2.1
....................  
.................... output_low(LED1);//Green LED OFF 
0440:  BCLR.B  2E4.7
0442:  BCLR.B  2E8.7
....................  
.................... enable_interrupts(INTR_GLOBAL); 
0444:  BCLR.B  81.7
0446:  CLR     42
0448:  BSET.B  81.7
.................... enable_interrupts(INT_RDA); 
044A:  BSET.B  95.3
....................  
.................... 	setup_timer4(TMR_INTERNAL|TMR_DIV_BY_256,250); //4ms 
044C:  CLR     11E
044E:  MOV     #FA,W4
0450:  MOV     W4,11A
0452:  MOV     #A030,W4
0454:  MOV     W4,11E
....................  
.................... 	setup_timer3(TMR_INTERNAL | TMR_DIV_BY_1,20000 ); 
0456:  CLR     112
0458:  MOV     #4E20,W4
045A:  MOV     W4,10E
045C:  MOV     #A000,W4
045E:  MOV     W4,112
....................  
....................  
....................  
.................... //2 PHASE 400 Hz  
.................... setup_compare( 1,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
0460:  MOV     #D,W4
0462:  MOV     W4,184
.................... OC1R   = 0; 
0464:  CLR     182
.................... OC1RS =10000; 
0466:  MOV     #2710,W4
0468:  MOV     W4,180
....................  
.................... setup_compare( 2,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
046A:  MOV     #D,W4
046C:  MOV     W4,18A
.................... OC2R   = 10000; 
046E:  MOV     #2710,W4
0470:  MOV     W4,188
.................... OC2RS =0; 
0472:  CLR     186
....................  
.................... setup_compare( 3,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
0474:  MOV     #D,W4
0476:  MOV     W4,190
.................... OC3R   = 5000; 
0478:  MOV     #1388,W4
047A:  MOV     W4,18E
.................... OC3RS =15000; 
047C:  MOV     #3A98,W4
047E:  MOV     W4,18C
....................  
.................... setup_compare( 4,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
0480:  MOV     #D,W4
0482:  MOV     W4,196
.................... OC4R   = 5000; 
0484:  MOV     #1388,W4
0486:  MOV     W4,194
.................... OC4RS =15000; 
0488:  MOV     #3A98,W4
048A:  MOV     W4,192
....................  
.................... setup_compare( 5,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
048C:  MOV     #D,W4
048E:  MOV     W4,19C
.................... OC5R   = 15000; 
0490:  MOV     #3A98,W4
0492:  MOV     W4,19A
.................... OC5RS =5000; 
0494:  MOV     #1388,W4
0496:  MOV     W4,198
....................  
.................... setup_compare( 6,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
0498:  MOV     #D,W4
049A:  MOV     W4,1A2
.................... OC6R   = 5000; 
049C:  MOV     #1388,W4
049E:  MOV     W4,1A0
.................... OC6RS =15000; 
04A0:  MOV     #3A98,W4
04A2:  MOV     W4,19E
....................  
.................... output_high(LED1);//Green LED ON 
04A4:  BCLR.B  2E4.7
04A6:  BSET.B  2E8.7
.................... output_high(SD);//Enable GEN  
04A8:  BCLR.B  2E5.7
04AA:  BSET.B  2E9.7
....................  
.................... setup_adc_ports( sAN2|sAN3|sAN13|sAN14|VSS_VDD ); //setup_adc_ports(AN);  
04AC:  MOV     #9FF3,W4
04AE:  MOV     W4,32C
04B0:  SETM    32A
04B2:  CLR     322
.................... setup_adc(ADC_CLOCK_DIV_8); //enables the a/d module and sets the clock to internal adc clock  
04B4:  MOV     #7,W4
04B6:  MOV     W4,324
04B8:  MOV     #80E0,W4
04BA:  MOV     W4,320
....................  
.................... Nt[1]=0x85; 
04BC:  MOV     #85,W4
04BE:  MOV     W4,81E
.................... Nt[2]=0x85; 
04C0:  MOV     #85,W4
04C2:  MOV     W4,820
.................... Nt[3]=0x85; 
04C4:  MOV     #85,W4
04C6:  MOV     W4,822
.................... Nt[4]=0x85; 
04C8:  MOV     #85,W4
04CA:  MOV     W4,824
....................             
.................... while (TRUE)  
....................     { 
....................  
.................... output_high(LED1);//Green LED ON 
04CC:  BCLR.B  2E4.7
04CE:  BSET.B  2E8.7
....................  
.................... //************ 1 Chanel (left index)*********************** 
.................... set_adc_channel(2); 
04D0:  MOV     #2,W4
04D2:  MOV     W4,328
.................... delay_us(100); 
04D4:  REPEAT  #31E
04D6:  NOP     
.................... V[1]=0; 
04D8:  CLR     830
.................... For ( i=1; i<= 4;++i) 
04DA:  MOV     #1,W4
04DC:  MOV     W4,81A
04DE:  MOV     81A,W4
04E0:  CP      W4,#4
04E2:  BRA     GTU,4FA
.................... { 
.................... ADC= read_adc(ADC_START_AND_READ); 
04E4:  BCLR.B  320.0
04E6:  BSET.B  320.1
04E8:  BTSS.B  320.0
04EA:  BRA     4E8
04EC:  PUSH    300
04EE:  POP     838
.................... V[1]=V[1]+ADC; 
04F0:  MOV     830,W0
04F2:  ADD     838,W0
04F4:  MOV     W0,830
.................... } 
04F6:  INC     081A
04F8:  BRA     4DE
.................... V[1]=V[1]/16; 
04FA:  MOV     830,W0
04FC:  LSR     W0,#4,W0
04FE:  MOV     W0,830
....................  
....................  
.................... D=10000; 
0500:  MOV     #2710,W4
0502:  MOV     W4,816
.................... if (Nt[1]>V[1]){ 
0504:  MOV     830,W0
0506:  MOV     81E,W4
0508:  CP      W4,W0
050A:  BRA     LEU,544
....................  D=10000+((Nt[1]-V[1])*100)-((E1-(Nt[1]-V[1]))*100); 
050C:  MOV     81E,W4
050E:  MOV     830,W3
0510:  SUB     W4,W3,W5
0512:  MOV     #64,W4
0514:  MUL.UU  W5,W4,W0
0516:  MOV     #2710,W4
0518:  ADD     W0,W4,W5
051A:  MOV     81E,W4
051C:  MOV     830,W3
051E:  SUB     W4,W3,W0
0520:  MOV     826,W4
0522:  SUB     W4,W0,W6
0524:  MOV     #64,W4
0526:  MUL.UU  W6,W4,W0
0528:  SUB     W5,W0,W0
052A:  MOV     W0,816
....................  E1=Nt[1]-V[1]; 
052C:  MOV     81E,W4
052E:  MOV     830,W3
0530:  SUB     W4,W3,W0
0532:  MOV     W0,826
.................... if (Nt[1]>(V[1]+50)) D=15000; 
0534:  MOV     #32,W4
0536:  MOV     830,W3
0538:  ADD     W3,W4,W0
053A:  MOV     81E,W4
053C:  CP      W4,W0
053E:  BRA     LEU,544
0540:  MOV     #3A98,W4
0542:  MOV     W4,816
.................... } 
.................... if (Nt[1]<V[1]){ 
0544:  MOV     81E,W0
0546:  MOV     830,W4
0548:  CP      W4,W0
054A:  BRA     LEU,584
....................  
....................  D=10000-((V[1]-Nt[1])*100)+((E1-(V[1]-Nt[1]))*100); 
054C:  MOV     830,W4
054E:  MOV     81E,W3
0550:  SUB     W4,W3,W5
0552:  MOV     #64,W4
0554:  MUL.UU  W5,W4,W0
0556:  MOV     #2710,W4
0558:  SUB     W4,W0,W5
055A:  MOV     830,W4
055C:  MOV     81E,W3
055E:  SUB     W4,W3,W0
0560:  MOV     826,W4
0562:  SUB     W4,W0,W6
0564:  MOV     #64,W4
0566:  MUL.UU  W6,W4,W0
0568:  ADD     W0,W5,W0
056A:  MOV     W0,816
....................  E1=V[1]-Nt[1]; 
056C:  MOV     830,W4
056E:  MOV     81E,W3
0570:  SUB     W4,W3,W0
0572:  MOV     W0,826
.................... if ((Nt[1]+50)<V[1]) D=5000; 
0574:  MOV     #32,W4
0576:  MOV     81E,W3
0578:  ADD     W3,W4,W5
057A:  MOV     830,W4
057C:  CP      W4,W5
057E:  BRA     LEU,584
0580:  MOV     #1388,W4
0582:  MOV     W4,816
.................... } 
....................  
.................... // if (Nt>(outchar+1)) D=10200; 
.................... //if (Nt<(outchar-1)) D=9800; 
.................... //if (Nt>(outchar+10)) D=10500; 
.................... //if (outchar>10) if (Nt<(outchar-10)) D=9500; 
.................... //if (Nt>(outchar+20)) D=10800; 
.................... //if (outchar>20) if (Nt<(outchar-20)) D=9200; 
.................... //if (Nt>(outchar+50)) D=15000; 
.................... //if (outchar>50) if (Nt<(outchar-50)) D=5000; 
.................... //if (D>=20000) D=0; 
....................  
.................... //setup_compare( 3,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
.................... OC3R   = D; 
0584:  PUSH    816
0586:  POP     18E
.................... if (D<=10000) OC3RS =10000+D; 
0588:  MOV     816,W4
058A:  MOV     #2710,W3
058C:  CP      W3,W4
058E:  BRA     NC,598
0590:  MOV     #2710,W0
0592:  ADD     816,W0
0594:  MOV     W0,18C
.................... else OC3RS =D-10000; 
0596:  BRA     5A0
0598:  MOV     816,W4
059A:  MOV     #2710,W3
059C:  SUB     W4,W3,W0
059E:  MOV     W0,18C
....................  
.................... //************ 2 Chanel (arrow right)*********************** 
....................  
.................... set_adc_channel(3); 
05A0:  MOV     #3,W4
05A2:  MOV     W4,328
.................... delay_us(100); 
05A4:  REPEAT  #31E
05A6:  NOP     
.................... V[2]=0; 
05A8:  CLR     832
.................... For ( i=1; i<= 4;++i) 
05AA:  MOV     #1,W4
05AC:  MOV     W4,81A
05AE:  MOV     81A,W4
05B0:  CP      W4,#4
05B2:  BRA     GTU,5CA
.................... { 
.................... ADC= read_adc(ADC_START_AND_READ); 
05B4:  BCLR.B  320.0
05B6:  BSET.B  320.1
05B8:  BTSS.B  320.0
05BA:  BRA     5B8
05BC:  PUSH    300
05BE:  POP     838
.................... V[2]=V[2]+ADC; 
05C0:  MOV     832,W0
05C2:  ADD     838,W0
05C4:  MOV     W0,832
.................... } 
05C6:  INC     081A
05C8:  BRA     5AE
.................... V[2]=V[2]/16; 
05CA:  MOV     832,W0
05CC:  LSR     W0,#4,W0
05CE:  MOV     W0,832
....................  
.................... D=10000; 
05D0:  MOV     #2710,W4
05D2:  MOV     W4,816
.................... if (Nt[2]>V[2]){ 
05D4:  MOV     832,W0
05D6:  MOV     820,W4
05D8:  CP      W4,W0
05DA:  BRA     LEU,614
....................  
....................  D=10000-((Nt[2]-V[2])*100)+((E2-(Nt[2]-V[2]))*100); 
05DC:  MOV     820,W4
05DE:  MOV     832,W3
05E0:  SUB     W4,W3,W5
05E2:  MOV     #64,W4
05E4:  MUL.UU  W5,W4,W0
05E6:  MOV     #2710,W4
05E8:  SUB     W4,W0,W5
05EA:  MOV     820,W4
05EC:  MOV     832,W3
05EE:  SUB     W4,W3,W0
05F0:  MOV     828,W4
05F2:  SUB     W4,W0,W6
05F4:  MOV     #64,W4
05F6:  MUL.UU  W6,W4,W0
05F8:  ADD     W0,W5,W0
05FA:  MOV     W0,816
....................  E2=Nt[2]-V[2]; 
05FC:  MOV     820,W4
05FE:  MOV     832,W3
0600:  SUB     W4,W3,W0
0602:  MOV     W0,828
.................... if (Nt[2]>(V[2]+50)) D=5000; 
0604:  MOV     #32,W4
0606:  MOV     832,W3
0608:  ADD     W3,W4,W0
060A:  MOV     820,W4
060C:  CP      W4,W0
060E:  BRA     LEU,614
0610:  MOV     #1388,W4
0612:  MOV     W4,816
.................... } 
....................  
.................... if (Nt[2]<V[2]){ 
0614:  MOV     820,W0
0616:  MOV     832,W4
0618:  CP      W4,W0
061A:  BRA     LEU,654
....................  
....................  D=10000+((V[2]-Nt[2])*100)-((E2-(V[2]-Nt[2]))*100); 
061C:  MOV     832,W4
061E:  MOV     820,W3
0620:  SUB     W4,W3,W5
0622:  MOV     #64,W4
0624:  MUL.UU  W5,W4,W0
0626:  MOV     #2710,W4
0628:  ADD     W0,W4,W5
062A:  MOV     832,W4
062C:  MOV     820,W3
062E:  SUB     W4,W3,W0
0630:  MOV     828,W4
0632:  SUB     W4,W0,W6
0634:  MOV     #64,W4
0636:  MUL.UU  W6,W4,W0
0638:  SUB     W5,W0,W0
063A:  MOV     W0,816
....................  E2=V[2]-Nt[2]; 
063C:  MOV     832,W4
063E:  MOV     820,W3
0640:  SUB     W4,W3,W0
0642:  MOV     W0,828
.................... if ((Nt[2]+50)<V[2]) D=15000; 
0644:  MOV     #32,W4
0646:  MOV     820,W3
0648:  ADD     W3,W4,W5
064A:  MOV     832,W4
064C:  CP      W4,W5
064E:  BRA     LEU,654
0650:  MOV     #3A98,W4
0652:  MOV     W4,816
.................... } 
....................  
.................... //setup_compare( 4,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
.................... OC4R   = D; 
0654:  PUSH    816
0656:  POP     194
.................... if (D<=10000) OC4RS =10000+D; 
0658:  MOV     816,W4
065A:  MOV     #2710,W3
065C:  CP      W3,W4
065E:  BRA     NC,668
0660:  MOV     #2710,W0
0662:  ADD     816,W0
0664:  MOV     W0,192
.................... else OC4RS =D-10000; 
0666:  BRA     670
0668:  MOV     816,W4
066A:  MOV     #2710,W3
066C:  SUB     W4,W3,W0
066E:  MOV     W0,192
....................  
.................... //************ 3 Chanel (arrow left)*********************** 
.................... set_adc_channel(13); 
0670:  MOV     #D,W4
0672:  MOV     W4,328
.................... delay_us(100); 
0674:  REPEAT  #31E
0676:  NOP     
.................... V[3]=0; 
0678:  CLR     834
.................... For ( i=1; i<= 4;++i) 
067A:  MOV     #1,W4
067C:  MOV     W4,81A
067E:  MOV     81A,W4
0680:  CP      W4,#4
0682:  BRA     GTU,69A
.................... { 
.................... ADC= read_adc(ADC_START_AND_READ); 
0684:  BCLR.B  320.0
0686:  BSET.B  320.1
0688:  BTSS.B  320.0
068A:  BRA     688
068C:  PUSH    300
068E:  POP     838
.................... V[3]=V[3]+ADC; 
0690:  MOV     834,W0
0692:  ADD     838,W0
0694:  MOV     W0,834
.................... } 
0696:  INC     081A
0698:  BRA     67E
.................... V[3]=V[3]/16; 
069A:  MOV     834,W0
069C:  LSR     W0,#4,W0
069E:  MOV     W0,834
....................  
.................... D=10000; 
06A0:  MOV     #2710,W4
06A2:  MOV     W4,816
.................... if (Nt[3]>V[3]){ 
06A4:  MOV     834,W0
06A6:  MOV     822,W4
06A8:  CP      W4,W0
06AA:  BRA     LEU,6E4
....................  D=10000-((Nt[3]-V[3])*100)+((E3-(Nt[3]-V[3]))*100); 
06AC:  MOV     822,W4
06AE:  MOV     834,W3
06B0:  SUB     W4,W3,W5
06B2:  MOV     #64,W4
06B4:  MUL.UU  W5,W4,W0
06B6:  MOV     #2710,W4
06B8:  SUB     W4,W0,W5
06BA:  MOV     822,W4
06BC:  MOV     834,W3
06BE:  SUB     W4,W3,W0
06C0:  MOV     82A,W4
06C2:  SUB     W4,W0,W6
06C4:  MOV     #64,W4
06C6:  MUL.UU  W6,W4,W0
06C8:  ADD     W0,W5,W0
06CA:  MOV     W0,816
....................  E3=Nt[3]-V[3]; 
06CC:  MOV     822,W4
06CE:  MOV     834,W3
06D0:  SUB     W4,W3,W0
06D2:  MOV     W0,82A
.................... if (Nt[3]>(V[3]+50)) D=5000; 
06D4:  MOV     #32,W4
06D6:  MOV     834,W3
06D8:  ADD     W3,W4,W0
06DA:  MOV     822,W4
06DC:  CP      W4,W0
06DE:  BRA     LEU,6E4
06E0:  MOV     #1388,W4
06E2:  MOV     W4,816
.................... } 
....................  
.................... if (Nt[3]<V[3]){ 
06E4:  MOV     822,W0
06E6:  MOV     834,W4
06E8:  CP      W4,W0
06EA:  BRA     LEU,724
....................  
....................  D=10000+((V[3]-Nt[3])*100)-((E3-(V[3]-Nt[3]))*100); 
06EC:  MOV     834,W4
06EE:  MOV     822,W3
06F0:  SUB     W4,W3,W5
06F2:  MOV     #64,W4
06F4:  MUL.UU  W5,W4,W0
06F6:  MOV     #2710,W4
06F8:  ADD     W0,W4,W5
06FA:  MOV     834,W4
06FC:  MOV     822,W3
06FE:  SUB     W4,W3,W0
0700:  MOV     82A,W4
0702:  SUB     W4,W0,W6
0704:  MOV     #64,W4
0706:  MUL.UU  W6,W4,W0
0708:  SUB     W5,W0,W0
070A:  MOV     W0,816
....................  E3=V[3]-Nt[3]; 
070C:  MOV     834,W4
070E:  MOV     822,W3
0710:  SUB     W4,W3,W0
0712:  MOV     W0,82A
.................... if ((Nt[3]+50)<V[3]) D=15000; 
0714:  MOV     #32,W4
0716:  MOV     822,W3
0718:  ADD     W3,W4,W5
071A:  MOV     834,W4
071C:  CP      W4,W5
071E:  BRA     LEU,724
0720:  MOV     #3A98,W4
0722:  MOV     W4,816
.................... } 
....................  
.................... //setup_compare( 5,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
.................... OC5R   = D; 
0724:  PUSH    816
0726:  POP     19A
.................... if (D<=10000) OC5RS =10000+D; 
0728:  MOV     816,W4
072A:  MOV     #2710,W3
072C:  CP      W3,W4
072E:  BRA     NC,738
0730:  MOV     #2710,W0
0732:  ADD     816,W0
0734:  MOV     W0,198
.................... else OC5RS =D-10000; 
0736:  BRA     740
0738:  MOV     816,W4
073A:  MOV     #2710,W3
073C:  SUB     W4,W3,W0
073E:  MOV     W0,198
....................  
.................... //************ 4 Chanel (right index)*********************** 
.................... set_adc_channel(14); 
0740:  MOV     #E,W4
0742:  MOV     W4,328
.................... delay_us(100); 
0744:  REPEAT  #31E
0746:  NOP     
.................... V[4]=0; 
0748:  CLR     836
.................... For ( i=1; i<= 4;++i) 
074A:  MOV     #1,W4
074C:  MOV     W4,81A
074E:  MOV     81A,W4
0750:  CP      W4,#4
0752:  BRA     GTU,76A
.................... { 
.................... ADC= read_adc(ADC_START_AND_READ); 
0754:  BCLR.B  320.0
0756:  BSET.B  320.1
0758:  BTSS.B  320.0
075A:  BRA     758
075C:  PUSH    300
075E:  POP     838
.................... V[4]=V[4]+ADC; 
0760:  MOV     836,W0
0762:  ADD     838,W0
0764:  MOV     W0,836
.................... } 
0766:  INC     081A
0768:  BRA     74E
.................... V[4]=V[4]/16; 
076A:  MOV     836,W0
076C:  LSR     W0,#4,W0
076E:  MOV     W0,836
....................  
.................... D=10000; 
0770:  MOV     #2710,W4
0772:  MOV     W4,816
.................... if (Nt[4]>V[4]){ 
0774:  MOV     836,W0
0776:  MOV     824,W4
0778:  CP      W4,W0
077A:  BRA     LEU,7B4
....................  D=10000+((Nt[4]-V[4])*100)-((E4-(Nt[4]-V[4]))*100); 
077C:  MOV     824,W4
077E:  MOV     836,W3
0780:  SUB     W4,W3,W5
0782:  MOV     #64,W4
0784:  MUL.UU  W5,W4,W0
0786:  MOV     #2710,W4
0788:  ADD     W0,W4,W5
078A:  MOV     824,W4
078C:  MOV     836,W3
078E:  SUB     W4,W3,W0
0790:  MOV     82C,W4
0792:  SUB     W4,W0,W6
0794:  MOV     #64,W4
0796:  MUL.UU  W6,W4,W0
0798:  SUB     W5,W0,W0
079A:  MOV     W0,816
....................  E4=Nt[4]-V[4]; 
079C:  MOV     824,W4
079E:  MOV     836,W3
07A0:  SUB     W4,W3,W0
07A2:  MOV     W0,82C
.................... if (Nt[4]>(V[4]+50)) D=15000; 
07A4:  MOV     #32,W4
07A6:  MOV     836,W3
07A8:  ADD     W3,W4,W0
07AA:  MOV     824,W4
07AC:  CP      W4,W0
07AE:  BRA     LEU,7B4
07B0:  MOV     #3A98,W4
07B2:  MOV     W4,816
.................... } 
....................  
.................... if (Nt[4]<V[4]){ 
07B4:  MOV     824,W0
07B6:  MOV     836,W4
07B8:  CP      W4,W0
07BA:  BRA     LEU,7F4
....................  
....................  D=10000-((V[4]-Nt[4])*100)+((E4-(V[4]-Nt[4]))*100); 
07BC:  MOV     836,W4
07BE:  MOV     824,W3
07C0:  SUB     W4,W3,W5
07C2:  MOV     #64,W4
07C4:  MUL.UU  W5,W4,W0
07C6:  MOV     #2710,W4
07C8:  SUB     W4,W0,W5
07CA:  MOV     836,W4
07CC:  MOV     824,W3
07CE:  SUB     W4,W3,W0
07D0:  MOV     82C,W4
07D2:  SUB     W4,W0,W6
07D4:  MOV     #64,W4
07D6:  MUL.UU  W6,W4,W0
07D8:  ADD     W0,W5,W0
07DA:  MOV     W0,816
....................  E4=V[4]-Nt[4]; 
07DC:  MOV     836,W4
07DE:  MOV     824,W3
07E0:  SUB     W4,W3,W0
07E2:  MOV     W0,82C
.................... if ((Nt[4]+50)<V[4]) D=5000; 
07E4:  MOV     #32,W4
07E6:  MOV     824,W3
07E8:  ADD     W3,W4,W5
07EA:  MOV     836,W4
07EC:  CP      W4,W5
07EE:  BRA     LEU,7F4
07F0:  MOV     #1388,W4
07F2:  MOV     W4,816
.................... } 
....................  
.................... //setup_compare( 6,COMPARE_CONT_PULSE | COMPARE_TIMER3 ); 
.................... OC6R   = D; 
07F4:  PUSH    816
07F6:  POP     1A0
.................... if (D<=10000) OC6RS =10000+D; 
07F8:  MOV     816,W4
07FA:  MOV     #2710,W3
07FC:  CP      W3,W4
07FE:  BRA     NC,808
0800:  MOV     #2710,W0
0802:  ADD     816,W0
0804:  MOV     W0,19E
.................... else OC6RS =D-10000; 
0806:  BRA     810
0808:  MOV     816,W4
080A:  MOV     #2710,W3
080C:  SUB     W4,W3,W0
080E:  MOV     W0,19E
....................  
.................... //***************************************** 
....................  
.................... output_low(LED2);//Red LED OFF 
0810:  BCLR.B  2E5.0
0812:  BCLR.B  2E9.0
.................... output_low(LED1);//Green LED OFF 
0814:  BCLR.B  2E4.7
0816:  BCLR.B  2E8.7
.................... delay_ms(50); 
0818:  MOV     #32,W0
081A:  CALL    3EA
....................  
....................     }  
081E:  BRA     4CC
.................... }  
....................  
0820:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0082   PR IESO
          H: 0000  
   Word  5L: 00C6   HS NOOSCIO
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 0006   PUT64
          H: 0000  
   Word  8L: 00C3   ICSP1 NOJTAG NODEBUG
          H: 0000  
